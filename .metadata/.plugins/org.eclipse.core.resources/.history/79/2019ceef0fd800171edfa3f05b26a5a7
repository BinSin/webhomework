package kr.ac.hansung.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import kr.ac.hansung.model.Course;

// 이것을 Bean으로 등록하겠다는 의미
@Repository
public class CourseDAO {

	private JdbcTemplate jdbcTemplate;

	@Autowired
	public void setDataSource(DataSource dataSource) {
		jdbcTemplate = new JdbcTemplate(dataSource);
	}

	// 학기별 학점 총합 조회
	public int getGradeCredit() {
		
		String sqlStatement = "select sum(credit) from courses where year=? and semester=?";
	
		return jdbcTemplate.queryForObject(sqlStatement, new Object[] {year, semester}, new RowMapper<Course>() {
			Course course = new Course();
			course.setYear(rs.getInt("year"));
			course.setSemester(rs.getInt("semester"));
		});
	}
	

	// query and return a single object
	public Course getCourse(String name) {
		String sqlStatement = "select * from courses where name=?";
		return jdbcTemplate.queryForObject(sqlStatement, new Object[] { name }, new RowMapper<Course>() {
			public Course mapRow(ResultSet rs, int rowNum) throws SQLException {

				Course course = new Course();

				course.setYear(rs.getInt("year"));
				course.setSemester(rs.getInt("semester"));
				course.setCourse_code(rs.getString("course_code"));
				course.setCourse_name(rs.getString("course_name"));
				course.setClassification(rs.getString("classification"));
				course.setCredit(rs.getInt("credit"));

				return course;
			}
		});
	}

	// query course return multiple objects
	public List<Course> getCourses() {
		String sqlStatement = "select * from courses";
		return jdbcTemplate.query(sqlStatement, new RowMapper<Course>() {
			public Course mapRow(ResultSet rs, int rowNum) throws SQLException {

				Course course = new Course();

				course.setYear(rs.getInt("year"));
				course.setSemester(rs.getInt("semester"));
				course.setCourse_code(rs.getString("course_code"));
				course.setCourse_name(rs.getString("course_name"));
				course.setClassification(rs.getString("classification"));
				course.setCredit(rs.getInt("credit"));

				return course;
			}
		});
	}

	/*
	 * 학기별 이수 학점 조회 이수 구분별 학점 조회 수강 신청하기 수강 신청 조회 이 4가지 메뉴 만들기
	 */


	/*
	 * public boolean insert(Course course) {
	 * 
	 * String name = course.getName(); String email = course.getEmail(); String text
	 * = course.getText();
	 * 
	 * String sqlStatement =
	 * "insert into offers (name, email, text) values (?, ?, ?)";
	 * 
	 * // 몇개가 업데이트 되었는지 리턴해 준다. return (jdbcTemplate.update(sqlStatement, new
	 * Object[] {name, email, text}) == 1); }
	 * 
	 * public boolean update(Offer offer) {
	 * 
	 * int id = offer.getId(); String name = offer.getName(); String email =
	 * offer.getEmail(); String text = offer.getText();
	 * 
	 * String sqlStatement = "update offers set name=?, email=?, text=? where id=?";
	 * 
	 * // 몇개가 업데이트 되었는지 리턴해 준다. return (jdbcTemplate.update(sqlStatement, new
	 * Object[] {name, email, text, id}) == 1); }
	 * 
	 * public boolean delete(int id) {
	 * 
	 * String sqlStatement = "delete from offers where id=?";
	 * 
	 * return (jdbcTemplate.update(sqlStatement, new Object[] {id}) == 1); }
	 */
}